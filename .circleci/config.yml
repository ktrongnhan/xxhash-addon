version: 2.1

commands:
  parameterized_steps:
    parameters:
      compiler_c:
        default: "gcc"
        type: string
      compiler_cpp:
        default: "g++"
        type: string
      jest_extra_params:
        default: ""
        type: string
      # Needs to set LD_PRELOAD for GCC.
      ld_preload:
        default: ""
        type: string
      # Evil hack to deal with now out-dated version of Node.
      hack:
        default: ""
        type: string

    steps:
      - checkout
      - run: git submodule update --init
      - run: sudo apt-get update && sudo apt-get -y install python <<parameters.compiler_c>> <<parameters.compiler_cpp>> make
      - run: |
          node --version
          npm --version
          <<parameters.compiler_c>> --version
          <<parameters.compiler_cpp>> --version

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: CC=$(which <<parameters.compiler_c>>) npm run debug:build
      - run: npm install jest --save-dev

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

      - run: <<parameters.ld_preload>> <<parameters.hack>> LSAN_OPTIONS=suppressions=suppr.lsan DEBUG=1 node node_modules/jest/bin/jest.js <<parameters.jest_extra_params>>
      # To speed up CI a bit, don't run asan builds with benchmark.js.
      # - run: LD_PRELOAD=$(gcc -print-file-name=libasan.so) LSAN_OPTIONS=suppressions=suppr.lsan node benchmark.js

      - run: npm run ci:build
      - run: npm test

      # package and install
      - run: |
          npm run install
          npm pack
          mkdir ~/package_install
          cp xxhash-addon*.tgz ~/package_install
          cd ~/package_install
          npm install xxhash-addon*.tgz

jobs:
  nodelatest-gcc:
    docker:
      - image: cimg/node:current

    working_directory: ~/xxhash-addon

    steps:      
      - parameterized_steps:
          ld_preload: "LD_PRELOAD=$(gcc -print-file-name=libasan.so)"

  nodelatest-clang:
    docker:
      - image: cimg/node:current

    working_directory: ~/xxhash-addon

    steps:      
      - parameterized_steps:
          compiler_c: "clang"
          compiler_cpp: "clang"

  node8-gcc:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.6

    working_directory: ~/xxhash-addon

    steps:      
      - parameterized_steps:
          ld_preload: "LD_PRELOAD=$(gcc -print-file-name=libasan.so)"
          # ASAN build seems to hang with this build config, so force exit.
          # Maybe check if calling the GC manually can resolve this.
          jest_extra_params: "--forceExit"

  node8-clang:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.6

    working_directory: ~/xxhash-addon

    steps:      
      - parameterized_steps:
          compiler_c: "clang"
          compiler_cpp: "clang"
          jest_extra_params: "--forceExit"
          # EVIL!!! Not sure why but ASAN built with clang always CHECKs on CircleCI for this image of node 8.6.
          # Stack trace looks like this:
          # ==1127==AddressSanitizer CHECK failed: ../../../../src/libsanitizer/asan/asan_globals.cc:114 "((AddrIsAlignedByGranularity(g->size_with_redzone))) != (0)" (0x0, 0x0)
          # 0 0x7f8acd479ba3 (/usr/bin/../lib/gcc/x86_64-linux-gnu/4.9/libasan.so+0x59ba3)
          # 1 0x7f8acd47dae3 in __sanitizer::CheckFailed(char const*, int, char const*, unsigned long long, unsigned long long) (/usr/bin/../lib/gcc/x86_64-linux-gnu/4.9/libasan.so+0x5dae3)
          # 2 0x7f8acd443273 in __asan_unregister_globals (/usr/bin/../lib/gcc/x86_64-linux-gnu/4.9/libasan.so+0x23273)
          # 3 0x7f8abcaa89d9 in asan.module_dtor (/home/circleci/xxhash-addon/build/Debug/addon.node+0x749d9)
          # 4 0x7f8ace30a9a9 (/lib64/ld-linux-x86-64.so.2+0x139a9)
          # 5 0x7f8ace3096bd (/lib64/ld-linux-x86-64.so.2+0x126bd)
          # 6 0x7f8acd21d02a (/lib/x86_64-linux-gnu/libdl.so.2+0x102a)
          # 7 0x7f8ace305aa3 (/lib64/ld-linux-x86-64.so.2+0xeaa3)
          # 8 0x7f8acd21d5dc (/lib/x86_64-linux-gnu/libdl.so.2+0x15dc)
          # 9 0x7f8acd21d0c0 in dlopen (/lib/x86_64-linux-gnu/libdl.so.2+0x10c0)
          # 10 0x1595c76 in uv_dlopen ../deps/uv/src/unix/dl.c:36
          # 11 0x135bfb4 in node::DLOpen(v8::FunctionCallbackInfo<v8::Value> const&) (/usr/local/bin/node+0x135bfb4)
          # 12 0xb9adf2 in v8::internal::FunctionCallbackArguments::Call(void (*)(v8::FunctionCallbackInfo<v8::Value> const&)) (/usr/local/bin/node+0xb9adf2)
          # 13 0xc13f59 in v8::internal::MaybeHandle<v8::internal::Object> v8::internal::(anonymous namespace)::HandleApiCallHelper<false>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::HeapObject>, v8::internal::Handle<v8::internal::FunctionTemplateInfo>, v8::internal::Handle<v8::internal::Object>, v8::internal::BuiltinArguments) (/usr/local/bin/node+0xc13f59)
          # 14 0xc14d08 in v8::internal::Builtin_HandleApiCall(int, v8::internal::Object**, v8::internal::Isolate*) (/usr/local/bin/node+0xc14d08)
          # 15 0x194996c046fc (+0x6fc)
          hack: "ASAN_OPTIONS=report_globals=0"

workflows:
  version: 2
  build_all:
    jobs:
      - nodelatest-gcc:
          filters:
            branches:
              only:
                - master
                - v2
      - nodelatest-clang:
          requires:
            - nodelatest-gcc
          filters:
            branches:
              only:
                - master
                - v2
      - node8-gcc:
          requires:
            - nodelatest-clang
          filters:
            branches:
              only:
                - master
                - v2
      - node8-clang:
          requires:
            - node8-gcc
          filters:
            branches:
              only:
                - master
                - v2